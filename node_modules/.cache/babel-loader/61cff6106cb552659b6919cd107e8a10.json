{"ast":null,"code":"var APP_PREFIX = 'ApplicationName_'; // Identifier for this app (this needs to be consistent across every cache update)\n\nvar VERSION = 'version_01'; // Version of the off-line cache (change this value everytime you want to update cache)\n\nvar CACHE_NAME = APP_PREFIX + VERSION;\nvar URLS = [// Add URL you want to cache in this list.\n'/{repository}/', // If you have separate JS/CSS files,\n'/{repository}/index.html' // add path to those files here\n]; // Respond with cached resources\n\nself.addEventListener('fetch', function (e) {\n  console.log('fetch request : ' + e.request.url);\n  e.respondWith(caches.match(e.request).then(function (request) {\n    if (request) {\n      // if cache is available, respond with cache\n      console.log('responding with cache : ' + e.request.url);\n      return request;\n    } else {\n      // if there are no cache, try fetching request\n      console.log('file is not cached, fetching : ' + e.request.url);\n      return fetch(e.request);\n    } // You can omit if/else for console.log & put one line below like this too.\n    // return request || fetch(e.request)\n\n  }));\n}); // Cache resources\n\nself.addEventListener('install', function (e) {\n  e.waitUntil(caches.open(CACHE_NAME).then(function (cache) {\n    console.log('installing cache : ' + CACHE_NAME);\n    return cache.addAll(URLS);\n  }));\n}); // Delete outdated caches\n\nself.addEventListener('activate', function (e) {\n  e.waitUntil(caches.keys().then(function (keyList) {\n    // `keyList` contains all cache names under your username.github.io\n    // filter out ones that has this app prefix to create white list\n    var cacheWhitelist = keyList.filter(function (key) {\n      return key.indexOf(APP_PREFIX);\n    }); // add current cache name to white list\n\n    cacheWhitelist.push(CACHE_NAME);\n    return Promise.all(keyList.map(function (key, i) {\n      if (cacheWhitelist.indexOf(key) === -1) {\n        console.log('deleting cache : ' + keyList[i]);\n        return caches.delete(keyList[i]);\n      }\n    }));\n  }));\n});","map":{"version":3,"sources":["C:/react/web-reactku/src/serviceWorker.js"],"names":["APP_PREFIX","VERSION","CACHE_NAME","URLS","self","addEventListener","e","console","log","request","url","respondWith","caches","match","then","fetch","waitUntil","open","cache","addAll","keys","keyList","cacheWhitelist","filter","key","indexOf","push","Promise","all","map","i","delete"],"mappings":"AAAA,IAAIA,UAAU,GAAG,kBAAjB,C,CAAwC;;AACxC,IAAIC,OAAO,GAAG,YAAd,C,CAAwC;;AACxC,IAAIC,UAAU,GAAGF,UAAU,GAAGC,OAA9B;AACA,IAAIE,IAAI,GAAG,CAA6B;AACtC,gBADS,EAC6B;AACtC,0BAFS,CAE6B;AAF7B,CAAX,C,CAKA;;AACAC,IAAI,CAACC,gBAAL,CAAsB,OAAtB,EAA+B,UAAUC,CAAV,EAAa;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBF,CAAC,CAACG,OAAF,CAAUC,GAA3C;AACAJ,EAAAA,CAAC,CAACK,WAAF,CACEC,MAAM,CAACC,KAAP,CAAaP,CAAC,CAACG,OAAf,EAAwBK,IAAxB,CAA6B,UAAUL,OAAV,EAAmB;AAC9C,QAAIA,OAAJ,EAAa;AAAE;AACbF,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAA6BF,CAAC,CAACG,OAAF,CAAUC,GAAnD;AACA,aAAOD,OAAP;AACD,KAHD,MAGO;AAAQ;AACbF,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAoCF,CAAC,CAACG,OAAF,CAAUC,GAA1D;AACA,aAAOK,KAAK,CAACT,CAAC,CAACG,OAAH,CAAZ;AACD,KAP6C,CAS9C;AACA;;AACD,GAXD,CADF;AAcD,CAhBD,E,CAkBA;;AACAL,IAAI,CAACC,gBAAL,CAAsB,SAAtB,EAAiC,UAAUC,CAAV,EAAa;AAC5CA,EAAAA,CAAC,CAACU,SAAF,CACEJ,MAAM,CAACK,IAAP,CAAYf,UAAZ,EAAwBY,IAAxB,CAA6B,UAAUI,KAAV,EAAiB;AAC5CX,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBN,UAApC;AACA,WAAOgB,KAAK,CAACC,MAAN,CAAahB,IAAb,CAAP;AACD,GAHD,CADF;AAMD,CAPD,E,CASA;;AACAC,IAAI,CAACC,gBAAL,CAAsB,UAAtB,EAAkC,UAAUC,CAAV,EAAa;AAC7CA,EAAAA,CAAC,CAACU,SAAF,CACEJ,MAAM,CAACQ,IAAP,GAAcN,IAAd,CAAmB,UAAUO,OAAV,EAAmB;AACpC;AACA;AACA,QAAIC,cAAc,GAAGD,OAAO,CAACE,MAAR,CAAe,UAAUC,GAAV,EAAe;AACjD,aAAOA,GAAG,CAACC,OAAJ,CAAYzB,UAAZ,CAAP;AACD,KAFoB,CAArB,CAHoC,CAMpC;;AACAsB,IAAAA,cAAc,CAACI,IAAf,CAAoBxB,UAApB;AAEA,WAAOyB,OAAO,CAACC,GAAR,CAAYP,OAAO,CAACQ,GAAR,CAAY,UAAUL,GAAV,EAAeM,CAAf,EAAkB;AAC/C,UAAIR,cAAc,CAACG,OAAf,CAAuBD,GAAvB,MAAgC,CAAC,CAArC,EAAwC;AACtCjB,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBa,OAAO,CAACS,CAAD,CAAzC;AACA,eAAOlB,MAAM,CAACmB,MAAP,CAAcV,OAAO,CAACS,CAAD,CAArB,CAAP;AACD;AACF,KALkB,CAAZ,CAAP;AAMD,GAfD,CADF;AAkBD,CAnBD","sourcesContent":["var APP_PREFIX = 'ApplicationName_'     // Identifier for this app (this needs to be consistent across every cache update)\nvar VERSION = 'version_01'              // Version of the off-line cache (change this value everytime you want to update cache)\nvar CACHE_NAME = APP_PREFIX + VERSION\nvar URLS = [                            // Add URL you want to cache in this list.\n  '/{repository}/',                     // If you have separate JS/CSS files,\n  '/{repository}/index.html'            // add path to those files here\n]\n\n// Respond with cached resources\nself.addEventListener('fetch', function (e) {\n  console.log('fetch request : ' + e.request.url)\n  e.respondWith(\n    caches.match(e.request).then(function (request) {\n      if (request) { // if cache is available, respond with cache\n        console.log('responding with cache : ' + e.request.url)\n        return request\n      } else {       // if there are no cache, try fetching request\n        console.log('file is not cached, fetching : ' + e.request.url)\n        return fetch(e.request)\n      }\n\n      // You can omit if/else for console.log & put one line below like this too.\n      // return request || fetch(e.request)\n    })\n  )\n})\n\n// Cache resources\nself.addEventListener('install', function (e) {\n  e.waitUntil(\n    caches.open(CACHE_NAME).then(function (cache) {\n      console.log('installing cache : ' + CACHE_NAME)\n      return cache.addAll(URLS)\n    })\n  )\n})\n\n// Delete outdated caches\nself.addEventListener('activate', function (e) {\n  e.waitUntil(\n    caches.keys().then(function (keyList) {\n      // `keyList` contains all cache names under your username.github.io\n      // filter out ones that has this app prefix to create white list\n      var cacheWhitelist = keyList.filter(function (key) {\n        return key.indexOf(APP_PREFIX)\n      })\n      // add current cache name to white list\n      cacheWhitelist.push(CACHE_NAME)\n\n      return Promise.all(keyList.map(function (key, i) {\n        if (cacheWhitelist.indexOf(key) === -1) {\n          console.log('deleting cache : ' + keyList[i] )\n          return caches.delete(keyList[i])\n        }\n      }))\n    })\n  )\n})"]},"metadata":{},"sourceType":"module"}